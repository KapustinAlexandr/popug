// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591

namespace Popug.Billing.Api.Data
{
	public partial class BillingDb : DataConnection
	{
		public BillingDb()
		{
			InitDataContext();
		}

		public BillingDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public BillingDb(DataOptions<BillingDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AccountEntity>       Accounts       => this.GetTable<AccountEntity>();
		public ITable<BillingCycleEntity>  BillingCycles  => this.GetTable<BillingCycleEntity>();
		public ITable<OperationsLogEntity> OperationsLogs => this.GetTable<OperationsLogEntity>();
		public ITable<TaskEntity>          Tasks          => this.GetTable<TaskEntity>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AccountEntity Find(this ITable<AccountEntity> table, int accountId)
		{
			return table.FirstOrDefault(e => e.AccountId == accountId);
		}

		public static Task<AccountEntity> FindAsync(this ITable<AccountEntity> table, int accountId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.AccountId == accountId, cancellationToken);
		}

		public static BillingCycleEntity Find(this ITable<BillingCycleEntity> table, int billingCycleId)
		{
			return table.FirstOrDefault(e => e.BillingCycleId == billingCycleId);
		}

		public static Task<BillingCycleEntity> FindAsync(this ITable<BillingCycleEntity> table, int billingCycleId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.BillingCycleId == billingCycleId, cancellationToken);
		}

		public static OperationsLogEntity Find(this ITable<OperationsLogEntity> table, int operationLogId)
		{
			return table.FirstOrDefault(e => e.OperationLogId == operationLogId);
		}

		public static Task<OperationsLogEntity> FindAsync(this ITable<OperationsLogEntity> table, int operationLogId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OperationLogId == operationLogId, cancellationToken);
		}

		public static TaskEntity Find(this ITable<TaskEntity> table, int taskId)
		{
			return table.FirstOrDefault(e => e.TaskId == taskId);
		}

		public static Task<TaskEntity> FindAsync(this ITable<TaskEntity> table, int taskId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TaskId == taskId, cancellationToken);
		}
		#endregion
	}
}
